import numpy as np
from arma import ode_system
from magi import MagiSolver


def fOde(theta, x, tvec):
    TU = x[:,0]
    TI = x[:,1]
    V = x[:,2]

    lambda_val = theta[0]
    rho = theta[1]
    delta = theta[2]
    N = theta[3]
    c = theta[4]

    eta = 9e-5 * (1 - 0.9 * np.cos(np.pi * tvec / 1000))

    result = np.zeros_like(x)
    result[:,0] = lambda_val - rho * TU - eta * TU * V
    result[:,1] = eta * TU * V - delta * TI
    result[:,2] = N * delta * TI - c * V

    return result

def fOdeDx(theta, x, tvec):
    resultDx = np.zeros(shape=[np.shape(x)[0], np.shape(x)[1], np.shape(x)[1]])

    TU = x[:,0]
    TI = x[:,1]
    V = x[:,2]

    lambda_val = theta[0]
    rho = theta[1]
    delta = theta[2]
    N = theta[3]
    c = theta[4]

    eta = 9e-5 * (1 - 0.9 * np.cos(np.pi * tvec / 1000))

    resultDx[:,0,0] = -rho - eta * V
    resultDx[:,1,0] = 0
    resultDx[:,2,0] = -eta * TU

    resultDx[:,0,1] = eta * V
    resultDx[:,1,1] = -delta
    resultDx[:,2,1] = eta * TU

    resultDx[:,0,2] = 0
    resultDx[:,1,2] = N * delta
    resultDx[:,2,2] = -c

    return resultDx

def fOdeDtheta(theta, x, tvec):
    resultDtheta = np.zeros(shape=[np.shape(x)[0], np.shape(theta)[0], np.shape(x)[1]])

    TU = x[:,0]
    TI = x[:,1]
    V = x[:,2]

    lambda_val = theta[0]
    rho = theta[1]
    delta = theta[2]
    N = theta[3]
    c = theta[4]

    eta = 9e-5 * (1 - 0.9 * np.cos(np.pi * tvec / 1000))

    resultDtheta[:,0,0] = 1
    resultDtheta[:,1,0] = -TU
    resultDtheta[:,2,0] = 0
    resultDtheta[:,3,0] = 0
    resultDtheta[:,4,0] = 0

    resultDtheta[:,0,1] = 0
    resultDtheta[:,1,1] = 0
    resultDtheta[:,2,1] = -TI
    resultDtheta[:,3,1] = 0
    resultDtheta[:,4,1] = 0

    resultDtheta[:,0,2] = 0
    resultDtheta[:,1,2] = 0
    resultDtheta[:,2,2] = N * TI
    resultDtheta[:,3,2] = delta * TI
    resultDtheta[:,4,2] = -V

    return resultDtheta

hiv_time_dependent_system = ode_system("hiv-time-dependent-python", fOde, fOdeDx, fOdeDtheta,
                                       thetaLowerBound=np.array([0,0,0,0,0]), thetaUpperBound=np.array([np.inf, np.inf, np.inf, np.inf, np.inf]))

ydataTruth = [[600, 517.255130535394, 469.324682159968,
               436.165105457618, 409.963915724088, 387.441082636964, 367.17134663908,
               348.526076692505, 331.224388914877, 315.13566395674, 300.19139928796,
               286.345950270594, 273.559568425154, 261.791594206156, 250.998298290709,
               241.132764647809, 232.145608142976, 223.985984393523, 216.602550707226,
               209.944344477294, 203.961500199327, 198.60582609555, 193.831196004693,
               189.593815396117, 185.852371912405, 182.56816471421, 179.705067467986,
               177.229489913253, 175.11029679632, 173.318697106093, 171.828116591986,
               170.614061414518, 169.653977334161, 168.927110033397, 168.4143681427,
               168.098192326404, 167.962430627932, 167.992222537375, 168.173890165938,
               168.494837936538, 168.943460200184, 169.509056542152, 170.18175437055,
               170.952438313869, 171.812685979097, 172.754709547129, 173.771302730257,
               174.855792623319, 176.001996004986, 177.204179660802, 178.457024409883,
               179.755592283214, 181.095296971253, 182.471876605363, 183.881368485553,
               185.320090425247, 186.784613534535, 188.27174535458, 189.778519643817,
               191.302172931802, 192.840132634923, 194.390003894701, 195.949557302423,
               197.516717680622, 199.089553736007, 200.666268522443, 202.245190541525,
               203.824765637474, 205.403549378533, 206.980200019523, 208.553471970881,
               210.122209713929, 211.685342140312, 213.241877276247, 214.79089736094,
               216.331554252279, 217.863065133579, 219.384708498944, 220.895820396157,
               222.395790908135, 223.884060855587, 225.360118705049, 226.8234976678,
               228.273772976358, 229.710559326385, 231.133508472791, 232.542306969725,
               233.936674044963, 235.316359599906, 236.681142327125, 238.03082793789,
               239.365247492801, 240.68425582906, 241.987730078392, 243.275568270077,
               244.547688013897, 245.804025258218, 247.044533118673, 248.269180773295,
               249.477952420169, 250.670846293942],
              [30, 100.9441964002,
               133.537879277679, 149.876936635764, 158.678074125846, 163.654234059197,
               166.457803659179, 167.850870760187, 168.203134087353, 167.711107774855,
               166.495879837537, 164.646588668309, 162.23921961681, 159.344244927593,
               156.029224884018, 152.359249655206, 148.39653494332, 144.199824388336,
               139.823773951087, 135.31852457409, 130.729441981175, 126.096951502432,
               121.456652299396, 116.839465540046, 112.271892559043, 107.776224533092,
               103.370960033836, 99.0711407988725, 94.888707065348, 90.832847379648,
               86.9103360772333, 83.1258481756526, 79.4822522958261, 75.9808767123281,
               72.6217509721372, 69.4038210839189, 66.3251411737325, 63.3830406333987,
               60.5742713636525, 57.8951348474622, 55.3415915998843, 52.9093546966556,
               50.5939691444143, 48.3908787526314, 46.2954819593243, 44.3031780606122,
               42.409405084394, 40.6096704447079, 38.899575389893, 37.2748341518534,
               35.7312885523069, 34.2649188402013, 32.871851221909, 31.5483628083914,
               30.2908838652594, 29.0960008969656, 27.9604520819186, 26.8811260922742,
               25.8550639695932, 24.8794505050657, 23.9516116492091, 23.0690099441472,
               22.2292395275105, 21.4300209956918, 20.6691961489746, 19.9447227000805,
               19.2546689427877, 18.5972085570895, 17.9706154429865, 17.3732586963146,
               16.8035977274854, 16.2601775374276, 15.7416241653219, 15.2466403152573,
               14.7740011664237, 14.3225503691245, 13.8911962263662, 13.4789080593316,
               13.0847127535606, 12.7076914816181, 12.346976597279, 12.001748695533,
               11.6712338323822, 11.3547008980667, 11.051459137183, 10.7608558090925,
               10.4822739820115, 10.2151304542411, 9.95887379610456, 9.71298250630117,
               9.4769632766256, 9.25034935910054, 9.03269902988376, 8.82359414449786,
               8.62263877916939, 8.42945795331103, 8.2436964284108, 8.06501757883308,
               7.8931023302636, 7.72764816175056, 7.5683681675461],
              [1e+05,
               60426.4017368345, 42246.0999304948, 33967.4962531708, 30307.7962328865,
               28788.382398177, 28232.2491278061, 28076.4092680158, 28051.021291219,
               28027.7603301301, 27947.4793022336, 27785.3242011831, 27533.7490654679,
               27194.067808929, 26772.1732274692, 26276.280870524, 25715.6760900001,
               25099.9931572936, 24438.7744280597, 23741.181599301, 23015.8192614937,
               22270.61067318, 21512.7459245135, 20748.6550590835, 19984.0124164349,
               19223.7410867626, 18472.0627493286, 17732.5408140294, 17008.1315886745,
               16301.2394154031, 15613.7729986286, 14947.2005402888, 14302.6029962598,
               13680.7240127703, 13082.0165249321, 12506.685267029, 11954.7254221422,
               11425.9570262477, 10920.0557783611, 10436.5800952008, 9974.99478677675,
               9534.69160816039, 9115.00697748991, 8715.23714533086, 8334.65107738664,
               7972.50132041317, 7628.03308864665, 7300.491793363, 6989.12921782539,
               6693.20852205202, 6412.00823153518, 6144.82537631643, 5890.97786931002,
               5649.80629009168, 5420.67505879076, 5202.97361089645, 4996.1162093714,
               4799.54216916987, 4612.71656177892, 4435.12907838034, 4266.29381627306,
               4105.7487082741, 3953.05482563991, 3807.79562282557, 3669.57613117594,
               3538.02212079106, 3412.77923460236, 3293.51212742432, 3179.90359647256,
               3071.65372363886, 2968.47903279375, 2870.11166649253, 2776.29858598146,
               2686.80079719025, 2601.39260463571, 2519.86089457375, 2442.0044481669,
               2367.63328502293, 2296.5680371056, 2228.63935273289, 2163.68733015877,
               2101.5609800565, 2042.11771608486, 1985.22287262196, 1930.74924867657,
               1878.57667693937, 1828.59161690757, 1780.68677100266, 1734.76072260131,
               1690.71759490801, 1648.46672961845, 1607.92238434646, 1569.0034478143,
               1531.6331718431, 1495.73891921315, 1461.25192650247, 1428.10708105014,
               1396.24271122979, 1365.60038925782, 1336.12474579851, 1307.76329566773
               ]]
ydataTruth = np.array(ydataTruth).transpose()

ydata = [[605.482, 516.696, 466.816, 437.609, 410.107,
          386.236, 363.562, 351.9, 327.346, 320.566, 301.164, 290.443,
          268.17, 257.382, 247.484, 237.934, 229.424, 221.438, 217.612,
          206.664, 204.704, 196.382, 190.519, 193.683, 185.257, 186.968,
          181.519, 176.241, 170.791, 165.105, 166.867, 168.602, 169.359,
          169.918, 170.889, 166.512, 168.321, 171.22, 167.41, 171.782,
          169.916, 170.47, 170.062, 164.391, 165.992, 167.702, 171.332,
          181.286, 180.093, 179.446, 169.309, 181.446, 178.755, 185.912,
          183.024, 181.192, 186.478, 187.177, 186.718, 186.615, 194.321,
          192.726, 199.17, 200.025, 192.407, 203.954, 201.518, 201.224,
          201.932, 211.742, 202.055, 203.69, 216.964, 211.345, 217.715,
          210.954, 220.29, 221.065, 221.351, 227.62, 223.622, 219.565,
          221.877, 227.99, 227.979, 234.202, 227.661, 231.168, 234.044,
          233.532, 233.119, 241.112, 238.959, 243.17, 241.438, 246.203,
          248.597, 252.271, 246.703, 248.263, 256.479],
         [28.828,
          101.493, 138.154, 153.915, 157.061, 165.231, 165.133, 167.071,
          165.987, 165.605, 164.141, 162.585, 163.712, 161.347, 156.114,
          150.853, 145.825, 145.315, 136.092, 132.37, 133.614, 125.023,
          128.136, 118.319, 112.14, 105.574, 102.913, 101.924, 95.475,
          88.811, 87.937, 84.995, 81.062, 75.273, 73.739, 71.83, 65.756,
          64.204, 58.246, 54.373, 53.604, 50.421, 50.975, 51.848, 51.729,
          43.989, 35.588, 39.843, 39.285, 41.489, 36.038, 35.834, 32.324,
          30.295, 28.331, 30.309, 26.301, 25.13, 27.754, 25.368, 30.553,
          23.74, 22.294, 26.699, 18.23, 20.889, 16.237, 11.566, 22.126,
          12.092, 18.38, 19.159, 17.567, 10.487, 18.129, 14.306, 12.576,
          17.264, 7.828, 13.507, 14.951, 9.082, 11.897, 12.76, 9.653, 9.192,
          9.983, 6.67, 8.767, 7.018, 9.48, 7.75, 2.39, 8.006, 9.067, 12.725,
          15.606, 5.506, 3.398, 5.953, 8.474],
         [99987.475, 60396.44,
          42237.232, 33982.597, 30327.029, 28790.103, 28226.011, 28069.724,
          28052.865, 28043.399, 27964.969, 27789.221, 27536.936, 27184.736,
          26770.611, 26271.002, 25728.799, 25114.137, 24436.717, 23748.905,
          23021.303, 22257.192, 21518.631, 20757.727, 19986.504, 19225.924,
          18460.674, 17723.894, 16996.794, 16296.273, 15608.727, 14934.377,
          14291.511, 13672.176, 13083.674, 12498.776, 11958.922, 11438.808,
          10918.491, 10423.493, 9976.698, 9531.598, 9113.649, 8730.256,
          8342.503, 7968.776, 7644.89, 7286.271, 6984.949, 6690.946, 6434.56,
          6153.899, 5913.206, 5637.866, 5413.823, 5200.372, 4994.445, 4808.642,
          4609.432, 4430.109, 4279.908, 4104.128, 3944.593, 3799.133, 3659.732,
          3528.605, 3412.804, 3286.724, 3162.941, 3086.033, 2979.277, 2888.409,
          2782.166, 2680.629, 2592.124, 2527.072, 2442.519, 2366.37, 2301.341,
          2212.542, 2157.973, 2103.708, 2052.807, 1979.577, 1939.42, 1878.018,
          1821.99, 1788.558, 1748.996, 1693.653, 1637.759, 1592.744, 1582.665,
          1522.955, 1491.6, 1459.352, 1427.036, 1417.456, 1351.105, 1370.643,
          1305.584]]
ydata = np.array(ydata).transpose()

SEED = np.random.randint(1, 100000)
np.random.seed(SEED)

ydata[:, 0] = ydataTruth[:, 0] + np.random.normal(0, np.sqrt(10), ydataTruth[:, 0].size)
ydata[:, 1] = ydataTruth[:, 1] + np.random.normal(0, np.sqrt(10), ydataTruth[:, 1].size)
ydata[:, 2] = ydataTruth[:, 2] + np.random.normal(0, 10, ydataTruth[:, 2].size)

tvecObs = np.linspace(0, 20, num=101)
tvecFull = np.linspace(0, 20, num=201)
yFull = np.ndarray([201, 3])
yFull.fill(np.nan)
yFull[np.linspace(0, 20, num=101).astype(int), :] = ydata

xInitExogenous = np.zeros_like(yFull)
for j in range(3):
    xInitExogenous[:, j] = np.interp(tvecFull, tvecObs, ydata[:, j])

#' manually override estimated hyper-parameters for component 3 because
#' GP smoothing gives bad result for rapidly decreasing curve
phiExogenous = np.array([37322.66, 11271.63, 14299.71, 4.16, 3.02, 1]).reshape([2, ydata.shape[1]])
sigmaInit = np.array([4, 3, 10])


control=dict(
    niterHmc = 20000,
    stepSizeFactor = 0.06,
    xInit = xInitExogenous,
    phi=phiExogenous,
    sigma=sigmaInit,
)

result = MagiSolver(y=yFull, odeModel=hiv_time_dependent_system, tvec=tvecFull, control=control)

inferred_trajectory = np.mean(result['xsampled'], axis=-1)
inferred_theta = np.mean(result['theta'], axis=-1)
np.savetxt("hiv_time_dependent_inferred_theta_seed{}.csv".format(SEED), inferred_theta)
np.savetxt("hiv_time_dependent_inferred_trajectory_seed{}.csv".format(SEED), inferred_trajectory)
np.savetxt("hiv_time_dependent_inferred_sigma_seed{}.csv".format(SEED), np.mean(result['sigma'], axis=-1))

