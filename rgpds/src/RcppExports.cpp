// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// fnmodelODE
arma::mat fnmodelODE(const arma::vec& theta, const arma::mat& x);
RcppExport SEXP _gpds_fnmodelODE(SEXP thetaSEXP, SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(fnmodelODE(theta, x));
    return rcpp_result_gen;
END_RCPP
}
// fnmodelDx
arma::cube fnmodelDx(const arma::vec& theta, const arma::mat& x);
RcppExport SEXP _gpds_fnmodelDx(SEXP thetaSEXP, SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(fnmodelDx(theta, x));
    return rcpp_result_gen;
END_RCPP
}
// fnmodelDtheta
arma::cube fnmodelDtheta(const arma::vec& theta, const arma::mat& x);
RcppExport SEXP _gpds_fnmodelDtheta(SEXP thetaSEXP, SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(fnmodelDtheta(theta, x));
    return rcpp_result_gen;
END_RCPP
}
// hes1modelODE
arma::mat hes1modelODE(const arma::vec& theta, const arma::mat& x);
RcppExport SEXP _gpds_hes1modelODE(SEXP thetaSEXP, SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(hes1modelODE(theta, x));
    return rcpp_result_gen;
END_RCPP
}
// hes1modelDx
arma::cube hes1modelDx(const arma::vec& theta, const arma::mat& x);
RcppExport SEXP _gpds_hes1modelDx(SEXP thetaSEXP, SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(hes1modelDx(theta, x));
    return rcpp_result_gen;
END_RCPP
}
// hes1modelDtheta
arma::cube hes1modelDtheta(const arma::vec& theta, const arma::mat& x);
RcppExport SEXP _gpds_hes1modelDtheta(SEXP thetaSEXP, SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(hes1modelDtheta(theta, x));
    return rcpp_result_gen;
END_RCPP
}
// hes1logmodelODE
arma::mat hes1logmodelODE(const arma::vec& theta, const arma::mat& x);
RcppExport SEXP _gpds_hes1logmodelODE(SEXP thetaSEXP, SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(hes1logmodelODE(theta, x));
    return rcpp_result_gen;
END_RCPP
}
// hes1logmodelDx
arma::cube hes1logmodelDx(const arma::vec& theta, const arma::mat& x);
RcppExport SEXP _gpds_hes1logmodelDx(SEXP thetaSEXP, SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(hes1logmodelDx(theta, x));
    return rcpp_result_gen;
END_RCPP
}
// hes1logmodelDtheta
arma::cube hes1logmodelDtheta(const arma::vec& theta, const arma::mat& x);
RcppExport SEXP _gpds_hes1logmodelDtheta(SEXP thetaSEXP, SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(hes1logmodelDtheta(theta, x));
    return rcpp_result_gen;
END_RCPP
}
// HIVmodelODE
arma::mat HIVmodelODE(const arma::vec& theta, const arma::mat& x);
RcppExport SEXP _gpds_HIVmodelODE(SEXP thetaSEXP, SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(HIVmodelODE(theta, x));
    return rcpp_result_gen;
END_RCPP
}
// HIVmodelDx
arma::cube HIVmodelDx(const arma::vec& theta, const arma::mat& x);
RcppExport SEXP _gpds_HIVmodelDx(SEXP thetaSEXP, SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(HIVmodelDx(theta, x));
    return rcpp_result_gen;
END_RCPP
}
// HIVmodelDtheta
arma::cube HIVmodelDtheta(const arma::vec& theta, const arma::mat& x);
RcppExport SEXP _gpds_HIVmodelDtheta(SEXP thetaSEXP, SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(HIVmodelDtheta(theta, x));
    return rcpp_result_gen;
END_RCPP
}
// xthetaphisigmaSample
Rcpp::List xthetaphisigmaSample(const arma::mat& xInitial, const arma::vec& thetaInitial, const arma::mat& phiInitial, const arma::vec& sigmaInitial, const arma::mat& yobs, const arma::vec& xtimes, const arma::vec& step, const std::string modelName, const int nsteps, const bool traj);
RcppExport SEXP _gpds_xthetaphisigmaSample(SEXP xInitialSEXP, SEXP thetaInitialSEXP, SEXP phiInitialSEXP, SEXP sigmaInitialSEXP, SEXP yobsSEXP, SEXP xtimesSEXP, SEXP stepSEXP, SEXP modelNameSEXP, SEXP nstepsSEXP, SEXP trajSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type xInitial(xInitialSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type thetaInitial(thetaInitialSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type phiInitial(phiInitialSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type sigmaInitial(sigmaInitialSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type yobs(yobsSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type xtimes(xtimesSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type step(stepSEXP);
    Rcpp::traits::input_parameter< const std::string >::type modelName(modelNameSEXP);
    Rcpp::traits::input_parameter< const int >::type nsteps(nstepsSEXP);
    Rcpp::traits::input_parameter< const bool >::type traj(trajSEXP);
    rcpp_result_gen = Rcpp::wrap(xthetaphisigmaSample(xInitial, thetaInitial, phiInitial, sigmaInitial, yobs, xtimes, step, modelName, nsteps, traj));
    return rcpp_result_gen;
END_RCPP
}
// xthetaphisigmallikRcpp
Rcpp::List xthetaphisigmallikRcpp(const arma::mat& xlatent, const arma::vec& theta, const arma::mat& phi, const arma::vec& sigma, const arma::mat& yobs, const arma::vec& xtimes, const std::string modelName);
RcppExport SEXP _gpds_xthetaphisigmallikRcpp(SEXP xlatentSEXP, SEXP thetaSEXP, SEXP phiSEXP, SEXP sigmaSEXP, SEXP yobsSEXP, SEXP xtimesSEXP, SEXP modelNameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type xlatent(xlatentSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type yobs(yobsSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type xtimes(xtimesSEXP);
    Rcpp::traits::input_parameter< const std::string >::type modelName(modelNameSEXP);
    rcpp_result_gen = Rcpp::wrap(xthetaphisigmallikRcpp(xlatent, theta, phi, sigma, yobs, xtimes, modelName));
    return rcpp_result_gen;
END_RCPP
}
// xthetaphi1sigmallikRcpp
Rcpp::List xthetaphi1sigmallikRcpp(const arma::mat& xlatent, const arma::vec& theta, const arma::vec& phi1, const arma::vec& sigma, const arma::mat& yobs, const Rcpp::List& covAllDimInput, const Rcpp::NumericVector& priorTemperatureInput, const bool useBand, const bool useMean, const std::string modelName);
RcppExport SEXP _gpds_xthetaphi1sigmallikRcpp(SEXP xlatentSEXP, SEXP thetaSEXP, SEXP phi1SEXP, SEXP sigmaSEXP, SEXP yobsSEXP, SEXP covAllDimInputSEXP, SEXP priorTemperatureInputSEXP, SEXP useBandSEXP, SEXP useMeanSEXP, SEXP modelNameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type xlatent(xlatentSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type phi1(phi1SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type yobs(yobsSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type covAllDimInput(covAllDimInputSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type priorTemperatureInput(priorTemperatureInputSEXP);
    Rcpp::traits::input_parameter< const bool >::type useBand(useBandSEXP);
    Rcpp::traits::input_parameter< const bool >::type useMean(useMeanSEXP);
    Rcpp::traits::input_parameter< const std::string >::type modelName(modelNameSEXP);
    rcpp_result_gen = Rcpp::wrap(xthetaphi1sigmallikRcpp(xlatent, theta, phi1, sigma, yobs, covAllDimInput, priorTemperatureInput, useBand, useMean, modelName));
    return rcpp_result_gen;
END_RCPP
}
// xthetaphi1sigmaSample
Rcpp::List xthetaphi1sigmaSample(const arma::mat& yobs, const Rcpp::List& covList, const arma::vec& phi1Init, const arma::vec& sigmaInit, const arma::vec& xthetaInit, const arma::vec& step, const int nsteps, const bool traj, const std::string loglikflag, const Rcpp::NumericVector& priorTemperatureInput, const std::string modelName);
RcppExport SEXP _gpds_xthetaphi1sigmaSample(SEXP yobsSEXP, SEXP covListSEXP, SEXP phi1InitSEXP, SEXP sigmaInitSEXP, SEXP xthetaInitSEXP, SEXP stepSEXP, SEXP nstepsSEXP, SEXP trajSEXP, SEXP loglikflagSEXP, SEXP priorTemperatureInputSEXP, SEXP modelNameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type yobs(yobsSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type covList(covListSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type phi1Init(phi1InitSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type sigmaInit(sigmaInitSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type xthetaInit(xthetaInitSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type step(stepSEXP);
    Rcpp::traits::input_parameter< const int >::type nsteps(nstepsSEXP);
    Rcpp::traits::input_parameter< const bool >::type traj(trajSEXP);
    Rcpp::traits::input_parameter< const std::string >::type loglikflag(loglikflagSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type priorTemperatureInput(priorTemperatureInputSEXP);
    Rcpp::traits::input_parameter< const std::string >::type modelName(modelNameSEXP);
    rcpp_result_gen = Rcpp::wrap(xthetaphi1sigmaSample(yobs, covList, phi1Init, sigmaInit, xthetaInit, step, nsteps, traj, loglikflag, priorTemperatureInput, modelName));
    return rcpp_result_gen;
END_RCPP
}
// hmcTest
int hmcTest();
RcppExport SEXP _gpds_hmcTest() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(hmcTest());
    return rcpp_result_gen;
END_RCPP
}
// bandTest
double bandTest(std::string filename);
RcppExport SEXP _gpds_bandTest(SEXP filenameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type filename(filenameSEXP);
    rcpp_result_gen = Rcpp::wrap(bandTest(filename));
    return rcpp_result_gen;
END_RCPP
}
// paralleltemperingTest1
arma::cube paralleltemperingTest1();
RcppExport SEXP _gpds_paralleltemperingTest1() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(paralleltemperingTest1());
    return rcpp_result_gen;
END_RCPP
}
// paralleltemperingTest2
arma::cube paralleltemperingTest2();
RcppExport SEXP _gpds_paralleltemperingTest2() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(paralleltemperingTest2());
    return rcpp_result_gen;
END_RCPP
}
// hmcNormal
Rcpp::List hmcNormal(arma::vec initial, arma::vec step, arma::vec lb, arma::vec ub, int nsteps, bool traj);
RcppExport SEXP _gpds_hmcNormal(SEXP initialSEXP, SEXP stepSEXP, SEXP lbSEXP, SEXP ubSEXP, SEXP nstepsSEXP, SEXP trajSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type initial(initialSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type step(stepSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type lb(lbSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type ub(ubSEXP);
    Rcpp::traits::input_parameter< int >::type nsteps(nstepsSEXP);
    Rcpp::traits::input_parameter< bool >::type traj(trajSEXP);
    rcpp_result_gen = Rcpp::wrap(hmcNormal(initial, step, lb, ub, nsteps, traj));
    return rcpp_result_gen;
END_RCPP
}
// xthetallik_rescaledC
Rcpp::List xthetallik_rescaledC(const arma::mat& yobs, const Rcpp::List& covVr, const Rcpp::List& covRr, const double& sigma, const arma::vec& initial);
RcppExport SEXP _gpds_xthetallik_rescaledC(SEXP yobsSEXP, SEXP covVrSEXP, SEXP covRrSEXP, SEXP sigmaSEXP, SEXP initialSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type yobs(yobsSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type covVr(covVrSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type covRr(covRrSEXP);
    Rcpp::traits::input_parameter< const double& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type initial(initialSEXP);
    rcpp_result_gen = Rcpp::wrap(xthetallik_rescaledC(yobs, covVr, covRr, sigma, initial));
    return rcpp_result_gen;
END_RCPP
}
// xthetallikBandApproxC
Rcpp::List xthetallikBandApproxC(arma::mat& yobs, const Rcpp::List& covVr, const Rcpp::List& covRr, double& sigma, arma::vec& initial);
RcppExport SEXP _gpds_xthetallikBandApproxC(SEXP yobsSEXP, SEXP covVrSEXP, SEXP covRrSEXP, SEXP sigmaSEXP, SEXP initialSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type yobs(yobsSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type covVr(covVrSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type covRr(covRrSEXP);
    Rcpp::traits::input_parameter< double& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type initial(initialSEXP);
    rcpp_result_gen = Rcpp::wrap(xthetallikBandApproxC(yobs, covVr, covRr, sigma, initial));
    return rcpp_result_gen;
END_RCPP
}
// xthetallik_withmuC
Rcpp::List xthetallik_withmuC(const arma::mat& yobs, const Rcpp::List& covVr, const Rcpp::List& covRr, const double& sigma, const arma::vec& initial);
RcppExport SEXP _gpds_xthetallik_withmuC(SEXP yobsSEXP, SEXP covVrSEXP, SEXP covRrSEXP, SEXP sigmaSEXP, SEXP initialSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type yobs(yobsSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type covVr(covVrSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type covRr(covRrSEXP);
    Rcpp::traits::input_parameter< const double& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type initial(initialSEXP);
    rcpp_result_gen = Rcpp::wrap(xthetallik_withmuC(yobs, covVr, covRr, sigma, initial));
    return rcpp_result_gen;
END_RCPP
}
// speedbenchmarkXthetallik
arma::vec speedbenchmarkXthetallik(const arma::mat& yobs, const Rcpp::List& covVr, const Rcpp::List& covRr, const double& sigmaScalar, const arma::vec& initial, const int& nrep);
RcppExport SEXP _gpds_speedbenchmarkXthetallik(SEXP yobsSEXP, SEXP covVrSEXP, SEXP covRrSEXP, SEXP sigmaScalarSEXP, SEXP initialSEXP, SEXP nrepSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type yobs(yobsSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type covVr(covVrSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type covRr(covRrSEXP);
    Rcpp::traits::input_parameter< const double& >::type sigmaScalar(sigmaScalarSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type initial(initialSEXP);
    Rcpp::traits::input_parameter< const int& >::type nrep(nrepSEXP);
    rcpp_result_gen = Rcpp::wrap(speedbenchmarkXthetallik(yobs, covVr, covRr, sigmaScalar, initial, nrep));
    return rcpp_result_gen;
END_RCPP
}
// changeGPcovFromC
int changeGPcovFromC(Rcpp::List& covVr);
RcppExport SEXP _gpds_changeGPcovFromC(SEXP covVrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List& >::type covVr(covVrSEXP);
    rcpp_result_gen = Rcpp::wrap(changeGPcovFromC(covVr));
    return rcpp_result_gen;
END_RCPP
}
// cov_r2cpp_t1
void cov_r2cpp_t1(const Rcpp::List& cov_r);
RcppExport SEXP _gpds_cov_r2cpp_t1(SEXP cov_rSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List& >::type cov_r(cov_rSEXP);
    cov_r2cpp_t1(cov_r);
    return R_NilValue;
END_RCPP
}
// cov_r2cpp_t2
void cov_r2cpp_t2(Rcpp::NumericMatrix& cov_r);
RcppExport SEXP _gpds_cov_r2cpp_t2(SEXP cov_rSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix& >::type cov_r(cov_rSEXP);
    cov_r2cpp_t2(cov_r);
    return R_NilValue;
END_RCPP
}
// cov_r2cpp_t3
void cov_r2cpp_t3(arma::mat& cov_r);
RcppExport SEXP _gpds_cov_r2cpp_t3(SEXP cov_rSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type cov_r(cov_rSEXP);
    cov_r2cpp_t3(cov_r);
    return R_NilValue;
END_RCPP
}
// phisigllikHard2DC
Rcpp::List phisigllikHard2DC(const arma::vec& phisig, const arma::mat& yobs, const arma::mat& dist, std::string kernel);
RcppExport SEXP _gpds_phisigllikHard2DC(SEXP phisigSEXP, SEXP yobsSEXP, SEXP distSEXP, SEXP kernelSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type phisig(phisigSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type yobs(yobsSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type dist(distSEXP);
    Rcpp::traits::input_parameter< std::string >::type kernel(kernelSEXP);
    rcpp_result_gen = Rcpp::wrap(phisigllikHard2DC(phisig, yobs, dist, kernel));
    return rcpp_result_gen;
END_RCPP
}
// xthetallikC
Rcpp::List xthetallikC(const arma::mat& yobs, const Rcpp::List& covVr, const Rcpp::List& covRr, const arma::vec& sigmaInput, const arma::vec& initial, const bool useBand, const Rcpp::NumericVector& priorTemperatureInput);
RcppExport SEXP _gpds_xthetallikC(SEXP yobsSEXP, SEXP covVrSEXP, SEXP covRrSEXP, SEXP sigmaInputSEXP, SEXP initialSEXP, SEXP useBandSEXP, SEXP priorTemperatureInputSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type yobs(yobsSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type covVr(covVrSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type covRr(covRrSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type sigmaInput(sigmaInputSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type initial(initialSEXP);
    Rcpp::traits::input_parameter< const bool >::type useBand(useBandSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type priorTemperatureInput(priorTemperatureInputSEXP);
    rcpp_result_gen = Rcpp::wrap(xthetallikC(yobs, covVr, covRr, sigmaInput, initial, useBand, priorTemperatureInput));
    return rcpp_result_gen;
END_RCPP
}
// phisigllikC
Rcpp::List phisigllikC(const arma::vec& phisig, const arma::mat& yobs, const arma::mat& dist, std::string kernel);
RcppExport SEXP _gpds_phisigllikC(SEXP phisigSEXP, SEXP yobsSEXP, SEXP distSEXP, SEXP kernelSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type phisig(phisigSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type yobs(yobsSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type dist(distSEXP);
    Rcpp::traits::input_parameter< std::string >::type kernel(kernelSEXP);
    rcpp_result_gen = Rcpp::wrap(phisigllikC(phisig, yobs, dist, kernel));
    return rcpp_result_gen;
END_RCPP
}
// phisigloocvllikC
Rcpp::List phisigloocvllikC(const arma::vec& phisig, const arma::mat& yobs, const arma::mat& dist, std::string kernel);
RcppExport SEXP _gpds_phisigloocvllikC(SEXP phisigSEXP, SEXP yobsSEXP, SEXP distSEXP, SEXP kernelSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type phisig(phisigSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type yobs(yobsSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type dist(distSEXP);
    Rcpp::traits::input_parameter< std::string >::type kernel(kernelSEXP);
    rcpp_result_gen = Rcpp::wrap(phisigloocvllikC(phisig, yobs, dist, kernel));
    return rcpp_result_gen;
END_RCPP
}
// phisigloocvmseC
Rcpp::List phisigloocvmseC(const arma::vec& phisig, const arma::mat& yobs, const arma::mat& dist, std::string kernel);
RcppExport SEXP _gpds_phisigloocvmseC(SEXP phisigSEXP, SEXP yobsSEXP, SEXP distSEXP, SEXP kernelSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type phisig(phisigSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type yobs(yobsSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type dist(distSEXP);
    Rcpp::traits::input_parameter< std::string >::type kernel(kernelSEXP);
    rcpp_result_gen = Rcpp::wrap(phisigloocvmseC(phisig, yobs, dist, kernel));
    return rcpp_result_gen;
END_RCPP
}
// phisigSample
Rcpp::List phisigSample(const arma::mat& yobs, const arma::mat& dist, const arma::vec& initial, const arma::vec& step, int nsteps, bool traj, std::string kernel);
RcppExport SEXP _gpds_phisigSample(SEXP yobsSEXP, SEXP distSEXP, SEXP initialSEXP, SEXP stepSEXP, SEXP nstepsSEXP, SEXP trajSEXP, SEXP kernelSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type yobs(yobsSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type dist(distSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type initial(initialSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type step(stepSEXP);
    Rcpp::traits::input_parameter< int >::type nsteps(nstepsSEXP);
    Rcpp::traits::input_parameter< bool >::type traj(trajSEXP);
    Rcpp::traits::input_parameter< std::string >::type kernel(kernelSEXP);
    rcpp_result_gen = Rcpp::wrap(phisigSample(yobs, dist, initial, step, nsteps, traj, kernel));
    return rcpp_result_gen;
END_RCPP
}
// generalMaternCovRcpp
Rcpp::List generalMaternCovRcpp(const arma::vec& phi, const arma::mat& distSigned, int complexity);
RcppExport SEXP _gpds_generalMaternCovRcpp(SEXP phiSEXP, SEXP distSignedSEXP, SEXP complexitySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type distSigned(distSignedSEXP);
    Rcpp::traits::input_parameter< int >::type complexity(complexitySEXP);
    rcpp_result_gen = Rcpp::wrap(generalMaternCovRcpp(phi, distSigned, complexity));
    return rcpp_result_gen;
END_RCPP
}
// xthetaSample
Rcpp::List xthetaSample(const arma::mat& yobs, const Rcpp::List& covList, const arma::vec& sigmaInput, const arma::vec& initial, const arma::vec& step, const int nsteps, const bool traj, const std::string loglikflag, const double& overallTemperature, const Rcpp::NumericVector& priorTemperatureInput, const std::string modelName);
RcppExport SEXP _gpds_xthetaSample(SEXP yobsSEXP, SEXP covListSEXP, SEXP sigmaInputSEXP, SEXP initialSEXP, SEXP stepSEXP, SEXP nstepsSEXP, SEXP trajSEXP, SEXP loglikflagSEXP, SEXP overallTemperatureSEXP, SEXP priorTemperatureInputSEXP, SEXP modelNameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type yobs(yobsSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type covList(covListSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type sigmaInput(sigmaInputSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type initial(initialSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type step(stepSEXP);
    Rcpp::traits::input_parameter< const int >::type nsteps(nstepsSEXP);
    Rcpp::traits::input_parameter< const bool >::type traj(trajSEXP);
    Rcpp::traits::input_parameter< const std::string >::type loglikflag(loglikflagSEXP);
    Rcpp::traits::input_parameter< const double& >::type overallTemperature(overallTemperatureSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type priorTemperatureInput(priorTemperatureInputSEXP);
    Rcpp::traits::input_parameter< const std::string >::type modelName(modelNameSEXP);
    rcpp_result_gen = Rcpp::wrap(xthetaSample(yobs, covList, sigmaInput, initial, step, nsteps, traj, loglikflag, overallTemperature, priorTemperatureInput, modelName));
    return rcpp_result_gen;
END_RCPP
}
// parallel_temper_hmc_xtheta
arma::cube parallel_temper_hmc_xtheta(const arma::mat& yobs, const Rcpp::List& covVr, const Rcpp::List& covRr, const arma::vec& sigmaInput, const arma::vec& temperature, const double& alpha0, const arma::vec& initial, const arma::vec& step, int nsteps, int niter);
RcppExport SEXP _gpds_parallel_temper_hmc_xtheta(SEXP yobsSEXP, SEXP covVrSEXP, SEXP covRrSEXP, SEXP sigmaInputSEXP, SEXP temperatureSEXP, SEXP alpha0SEXP, SEXP initialSEXP, SEXP stepSEXP, SEXP nstepsSEXP, SEXP niterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type yobs(yobsSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type covVr(covVrSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type covRr(covRrSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type sigmaInput(sigmaInputSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type temperature(temperatureSEXP);
    Rcpp::traits::input_parameter< const double& >::type alpha0(alpha0SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type initial(initialSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type step(stepSEXP);
    Rcpp::traits::input_parameter< int >::type nsteps(nstepsSEXP);
    Rcpp::traits::input_parameter< int >::type niter(niterSEXP);
    rcpp_result_gen = Rcpp::wrap(parallel_temper_hmc_xtheta(yobs, covVr, covRr, sigmaInput, temperature, alpha0, initial, step, nsteps, niter));
    return rcpp_result_gen;
END_RCPP
}
// xthetallikRcpp
Rcpp::List xthetallikRcpp(const arma::mat& yobs, const Rcpp::List& covAllDimInput, const arma::vec& sigmaInput, const arma::vec& initial, const std::string modelName, const bool useBand, const Rcpp::NumericVector& priorTemperatureInput);
RcppExport SEXP _gpds_xthetallikRcpp(SEXP yobsSEXP, SEXP covAllDimInputSEXP, SEXP sigmaInputSEXP, SEXP initialSEXP, SEXP modelNameSEXP, SEXP useBandSEXP, SEXP priorTemperatureInputSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type yobs(yobsSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type covAllDimInput(covAllDimInputSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type sigmaInput(sigmaInputSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type initial(initialSEXP);
    Rcpp::traits::input_parameter< const std::string >::type modelName(modelNameSEXP);
    Rcpp::traits::input_parameter< const bool >::type useBand(useBandSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type priorTemperatureInput(priorTemperatureInputSEXP);
    rcpp_result_gen = Rcpp::wrap(xthetallikRcpp(yobs, covAllDimInput, sigmaInput, initial, modelName, useBand, priorTemperatureInput));
    return rcpp_result_gen;
END_RCPP
}
// xthetallikWithmuBandC
Rcpp::List xthetallikWithmuBandC(const arma::mat& yobs, const Rcpp::List& covVr, const Rcpp::List& covRr, const arma::vec& sigmaInput, const arma::vec& initial, const bool useBand, const Rcpp::NumericVector& priorTemperatureInput);
RcppExport SEXP _gpds_xthetallikWithmuBandC(SEXP yobsSEXP, SEXP covVrSEXP, SEXP covRrSEXP, SEXP sigmaInputSEXP, SEXP initialSEXP, SEXP useBandSEXP, SEXP priorTemperatureInputSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type yobs(yobsSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type covVr(covVrSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type covRr(covRrSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type sigmaInput(sigmaInputSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type initial(initialSEXP);
    Rcpp::traits::input_parameter< const bool >::type useBand(useBandSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type priorTemperatureInput(priorTemperatureInputSEXP);
    rcpp_result_gen = Rcpp::wrap(xthetallikWithmuBandC(yobs, covVr, covRr, sigmaInput, initial, useBand, priorTemperatureInput));
    return rcpp_result_gen;
END_RCPP
}
// xthetasigmallikRcpp
Rcpp::List xthetasigmallikRcpp(const arma::mat& xlatent, const arma::vec& theta, const arma::vec& sigma, const arma::mat& yobs, const Rcpp::List& covAllDimInput, const Rcpp::NumericVector& priorTemperatureInput, const bool useBand, const bool useMean, const std::string modelName);
RcppExport SEXP _gpds_xthetasigmallikRcpp(SEXP xlatentSEXP, SEXP thetaSEXP, SEXP sigmaSEXP, SEXP yobsSEXP, SEXP covAllDimInputSEXP, SEXP priorTemperatureInputSEXP, SEXP useBandSEXP, SEXP useMeanSEXP, SEXP modelNameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type xlatent(xlatentSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type yobs(yobsSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type covAllDimInput(covAllDimInputSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type priorTemperatureInput(priorTemperatureInputSEXP);
    Rcpp::traits::input_parameter< const bool >::type useBand(useBandSEXP);
    Rcpp::traits::input_parameter< const bool >::type useMean(useMeanSEXP);
    Rcpp::traits::input_parameter< const std::string >::type modelName(modelNameSEXP);
    rcpp_result_gen = Rcpp::wrap(xthetasigmallikRcpp(xlatent, theta, sigma, yobs, covAllDimInput, priorTemperatureInput, useBand, useMean, modelName));
    return rcpp_result_gen;
END_RCPP
}
// xthetasigmaSample
Rcpp::List xthetasigmaSample(const arma::mat& yobs, const Rcpp::List& covList, const arma::vec& sigmaInit, const arma::vec& xthetaInit, const arma::vec& step, const int nsteps, const bool traj, const std::string loglikflag, const Rcpp::NumericVector& priorTemperatureInput, const std::string modelName);
RcppExport SEXP _gpds_xthetasigmaSample(SEXP yobsSEXP, SEXP covListSEXP, SEXP sigmaInitSEXP, SEXP xthetaInitSEXP, SEXP stepSEXP, SEXP nstepsSEXP, SEXP trajSEXP, SEXP loglikflagSEXP, SEXP priorTemperatureInputSEXP, SEXP modelNameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type yobs(yobsSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type covList(covListSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type sigmaInit(sigmaInitSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type xthetaInit(xthetaInitSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type step(stepSEXP);
    Rcpp::traits::input_parameter< const int >::type nsteps(nstepsSEXP);
    Rcpp::traits::input_parameter< const bool >::type traj(trajSEXP);
    Rcpp::traits::input_parameter< const std::string >::type loglikflag(loglikflagSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type priorTemperatureInput(priorTemperatureInputSEXP);
    Rcpp::traits::input_parameter< const std::string >::type modelName(modelNameSEXP);
    rcpp_result_gen = Rcpp::wrap(xthetasigmaSample(yobs, covList, sigmaInit, xthetaInit, step, nsteps, traj, loglikflag, priorTemperatureInput, modelName));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_gpds_fnmodelODE", (DL_FUNC) &_gpds_fnmodelODE, 2},
    {"_gpds_fnmodelDx", (DL_FUNC) &_gpds_fnmodelDx, 2},
    {"_gpds_fnmodelDtheta", (DL_FUNC) &_gpds_fnmodelDtheta, 2},
    {"_gpds_hes1modelODE", (DL_FUNC) &_gpds_hes1modelODE, 2},
    {"_gpds_hes1modelDx", (DL_FUNC) &_gpds_hes1modelDx, 2},
    {"_gpds_hes1modelDtheta", (DL_FUNC) &_gpds_hes1modelDtheta, 2},
    {"_gpds_hes1logmodelODE", (DL_FUNC) &_gpds_hes1logmodelODE, 2},
    {"_gpds_hes1logmodelDx", (DL_FUNC) &_gpds_hes1logmodelDx, 2},
    {"_gpds_hes1logmodelDtheta", (DL_FUNC) &_gpds_hes1logmodelDtheta, 2},
    {"_gpds_HIVmodelODE", (DL_FUNC) &_gpds_HIVmodelODE, 2},
    {"_gpds_HIVmodelDx", (DL_FUNC) &_gpds_HIVmodelDx, 2},
    {"_gpds_HIVmodelDtheta", (DL_FUNC) &_gpds_HIVmodelDtheta, 2},
    {"_gpds_xthetaphisigmaSample", (DL_FUNC) &_gpds_xthetaphisigmaSample, 10},
    {"_gpds_xthetaphisigmallikRcpp", (DL_FUNC) &_gpds_xthetaphisigmallikRcpp, 7},
    {"_gpds_xthetaphi1sigmallikRcpp", (DL_FUNC) &_gpds_xthetaphi1sigmallikRcpp, 10},
    {"_gpds_xthetaphi1sigmaSample", (DL_FUNC) &_gpds_xthetaphi1sigmaSample, 11},
    {"_gpds_hmcTest", (DL_FUNC) &_gpds_hmcTest, 0},
    {"_gpds_bandTest", (DL_FUNC) &_gpds_bandTest, 1},
    {"_gpds_paralleltemperingTest1", (DL_FUNC) &_gpds_paralleltemperingTest1, 0},
    {"_gpds_paralleltemperingTest2", (DL_FUNC) &_gpds_paralleltemperingTest2, 0},
    {"_gpds_hmcNormal", (DL_FUNC) &_gpds_hmcNormal, 6},
    {"_gpds_xthetallik_rescaledC", (DL_FUNC) &_gpds_xthetallik_rescaledC, 5},
    {"_gpds_xthetallikBandApproxC", (DL_FUNC) &_gpds_xthetallikBandApproxC, 5},
    {"_gpds_xthetallik_withmuC", (DL_FUNC) &_gpds_xthetallik_withmuC, 5},
    {"_gpds_speedbenchmarkXthetallik", (DL_FUNC) &_gpds_speedbenchmarkXthetallik, 6},
    {"_gpds_changeGPcovFromC", (DL_FUNC) &_gpds_changeGPcovFromC, 1},
    {"_gpds_cov_r2cpp_t1", (DL_FUNC) &_gpds_cov_r2cpp_t1, 1},
    {"_gpds_cov_r2cpp_t2", (DL_FUNC) &_gpds_cov_r2cpp_t2, 1},
    {"_gpds_cov_r2cpp_t3", (DL_FUNC) &_gpds_cov_r2cpp_t3, 1},
    {"_gpds_phisigllikHard2DC", (DL_FUNC) &_gpds_phisigllikHard2DC, 4},
    {"_gpds_xthetallikC", (DL_FUNC) &_gpds_xthetallikC, 7},
    {"_gpds_phisigllikC", (DL_FUNC) &_gpds_phisigllikC, 4},
    {"_gpds_phisigloocvllikC", (DL_FUNC) &_gpds_phisigloocvllikC, 4},
    {"_gpds_phisigloocvmseC", (DL_FUNC) &_gpds_phisigloocvmseC, 4},
    {"_gpds_phisigSample", (DL_FUNC) &_gpds_phisigSample, 7},
    {"_gpds_generalMaternCovRcpp", (DL_FUNC) &_gpds_generalMaternCovRcpp, 3},
    {"_gpds_xthetaSample", (DL_FUNC) &_gpds_xthetaSample, 11},
    {"_gpds_parallel_temper_hmc_xtheta", (DL_FUNC) &_gpds_parallel_temper_hmc_xtheta, 10},
    {"_gpds_xthetallikRcpp", (DL_FUNC) &_gpds_xthetallikRcpp, 7},
    {"_gpds_xthetallikWithmuBandC", (DL_FUNC) &_gpds_xthetallikWithmuBandC, 7},
    {"_gpds_xthetasigmallikRcpp", (DL_FUNC) &_gpds_xthetasigmallikRcpp, 9},
    {"_gpds_xthetasigmaSample", (DL_FUNC) &_gpds_xthetasigmaSample, 10},
    {NULL, NULL, 0}
};

RcppExport void R_init_gpds(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
