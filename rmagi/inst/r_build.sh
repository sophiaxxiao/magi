#! /bin/bash
# if the following commands error, cause the script to error
set -e

if [[ -z "${R_LIBS_USER}" ]]; then
    export R_LIBS_USER=$HOME/R/library
fi

if [[ -z "${PROJECT}" ]]; then
    PROJECT="$(git rev-parse --show-toplevel)"
    export PROJECT
fi

if [[ -z "${CPU}" ]]; then
    export CPU=$(python3 -c 'import multiprocessing as mp; print(mp.cpu_count())')
fi

cd "$PROJECT"/rmagi || exit 1

# only select the mininum sufficient third party library for compile
mkdir -p inst/include/LBFGSpp
rsync -az $PROJECT/include/LBFGSB.h inst/include/
rsync -az $PROJECT/include/LBFGSpp/Param.h inst/include/LBFGSpp/
rsync -az $PROJECT/include/LBFGSpp/BFGSMat.h inst/include/LBFGSpp/
rsync -az $PROJECT/include/LBFGSpp/BKLDLT.h inst/include/LBFGSpp/
rsync -az $PROJECT/include/LBFGSpp/Cauchy.h inst/include/LBFGSpp/
rsync -az $PROJECT/include/LBFGSpp/SubspaceMin.h inst/include/LBFGSpp/
rsync -az $PROJECT/include/LBFGSpp/LineSearchMoreThuente.h inst/include/LBFGSpp/
rsync -az $PROJECT/package/LBFGSpp/LICENSE.md inst/include/LBFGSpp_LICENSE

perl -pi -e 's/\#define LBFGSPP_BK_LDLT_H/\#define LBFGSPP_BK_LDLT_H\n\#include <Rcpp.h>/g' inst/include/LBFGSpp/BKLDLT.h
perl -pi -e 's/\#define LBFGSPP_PARAM_H/\#define LBFGSPP_PARAM_H\n\#include <Rcpp.h>/g' inst/include/LBFGSpp/Param.h
perl -pi -e 's/std::cout/Rcpp::Rcout/g' inst/include/LBFGSpp/*.h
perl -pi -e 's/std::cerr/Rcpp::Rcerr/g' inst/include/LBFGSpp/*.h
perl -pi -e 's/assert\((.*)\);/if(!(\1)) Rcpp::Rcerr << "!(\1\)\\n\";/g' inst/include/LBFGSpp/*.h
perl -pi -e 's/\#pragma GCC diagnostic ignored \"-Wunused-parameter\"//g' inst/include/LBFGSpp/*.h
perl -pi -e 's/throw std::logic_error\(\"the moving direction does not decrease the objective function value\"\)/{}/g' inst/include/LBFGSpp/LineSearchMoreThuente.h
perl -pi -e 's/throw std::runtime_error\(\"the line search routine reached the maximum number of iterations\"\)/{}/g' inst/include/LBFGSpp/LineSearchMoreThuente.h


echo "
PKG_CXX=clang++
CXX_STD = CXX11
PKG_CXXFLAGS = -DNDEBUG -I'../inst/include'
PKG_LIBS = \$(LAPACK_LIBS) \$(BLAS_LIBS) \$(FLIBS)
" > src/Makevars

MAKE="make -j$CPU" Rscript -e 'if (!require("devtools")) install.packages("devtools", repos="http://cran.us.r-project.org")'
MAKE="make -j$CPU" Rscript -e 'if (!require("roxygen2")) install.packages("roxygen2", repos="http://cran.us.r-project.org")'
MAKE="make -j$CPU" Rscript -e 'devtools::install_deps(dependencies = TRUE, repos="http://cran.us.r-project.org", upgrade=FALSE)'

find src/ -lname '*' -delete
mkdir src/rcppmagi
rsync -az ../cmagi/*.cpp src/rcppmagi/
rsync -az ../cmagi/*.h src/rcppmagi/
perl -pi -e 's/\#include <armadillo>/\#include \"RcppArmadillo.h\"/g' src/rcppmagi/*.h
perl -pi -e 's/\#include <armadillo>/\#include \"RcppArmadillo.h\"/g' src/rcppmagi/*.cpp
perl -pi -e 's/\#include <Eigen.*>/\#include \"RcppEigen.h\"/g' src/rcppmagi/*.h
perl -pi -e 's/\#include <Eigen.*>/\#include \"RcppEigen.h\"/g' src/rcppmagi/*.cpp
perl -pi -e 's/std::cerr/Rcpp::Rcerr/g' src/rcppmagi/*.cpp
perl -pi -e 's/std::cout/Rcpp::Rcout/g' src/rcppmagi/*.cpp

git checkout -- R/zzz.R
COMPILING_INFORMATION=""
if [[ "$1" != "--cran" ]]; then
  COMPILING_INFORMATION="Build Date - $(date); GIT branch - $(git rev-parse --abbrev-ref HEAD); GIT commit number - $(git log -1 --oneline)"
fi

export COMPILING_INFORMATION
perl -pi -e 's/COMPILING_INFORMATION_HERE/$ENV{COMPILING_INFORMATION}/g' R/zzz.R

rsync -az src/rcppmagi/*.cpp src/
rsync -az src/rcppmagi/*.h src/

rm -r src/rcppmagi/

if [[ "$1" != "--cran" ]]; then
  echo "MAKEFLAGS = -j$CPU" >> src/Makevars
fi

rm NAMESPACE
echo "# Generated by roxygen2: do not edit by hand" >> NAMESPACE
MAKE="make -j$CPU" Rscript -e "Rcpp::compileAttributes(); devtools::document(); devtools::install(upgrade=FALSE);"

if [[ "$1" == "--cran" ]]; then
  export NOT_CRAN=TRUE
  mv examples inst/examples
  R -e 'Sys.getenv("NOT_CRAN"); devtools::build()'
  mv inst/examples examples
fi

LIB_PYMAGI_SOURCE=$(cd "$PROJECT"/cmagi && ls -- *.cpp)
LIB_PYMAGI_HEADERS=$(cd "$PROJECT"/cmagi && ls -- *.h)
cd "$PROJECT"/rmagi/src && rm $LIB_PYMAGI_SOURCE $LIB_PYMAGI_HEADERS
cd "$PROJECT"/rmagi || return
rm -r inst/include/
ln -s "$(pwd)"/../cmagi/*.cpp src/
ln -s "$(pwd)"/../cmagi/*.h src/
git checkout -- R/zzz.R
